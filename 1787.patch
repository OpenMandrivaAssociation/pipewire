From 333fd8d2ae83b5d9e62f692b7d6fe75b4ae3b865 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Wed, 22 Nov 2023 18:30:57 +0100
Subject: [PATCH 1/7] pipewire: module-roc-{sink,source}: port to ROC v0.3.X

ROC 0.3 introduced breaking changes, so adjust the code.
Also set the minimum supported ROC version to 0.3.0.

Fixes #3667
---
 src/modules/meson.build                                   | 2 +-
 .../module-protocol-pulse/modules/module-roc-sink-input.c | 2 +-
 .../module-protocol-pulse/modules/module-roc-source.c     | 2 +-
 src/modules/module-roc-sink.c                             | 8 ++++----
 src/modules/module-roc-source.c                           | 7 ++++---
 src/modules/module-roc/common.h                           | 2 --
 6 files changed, 11 insertions(+), 12 deletions(-)

diff --git a/src/modules/meson.build b/src/modules/meson.build
index 3b79b22687..1b434b7f62 100644
--- a/src/modules/meson.build
+++ b/src/modules/meson.build
@@ -624,7 +624,7 @@ if build_module_raop
 endif
 summary({'raop-sink (requires OpenSSL)': build_module_raop}, bool_yn: true, section: 'Optional Modules')
 
-roc_dep = dependency('roc', required: get_option('roc'))
+roc_dep = dependency('roc', version: '>= 0.3.0', required: get_option('roc'))
 summary({'ROC': roc_dep.found()}, bool_yn: true, section: 'Streaming between daemons')
 
 pipewire_module_rtp_source = shared_library('pipewire-module-rtp-source',
diff --git a/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c b/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c
index 7e6288042c..4cfc3e3a9a 100644
--- a/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c
+++ b/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c
@@ -27,7 +27,7 @@
 static const char *const pulse_module_options =
 	"sink=<name for the sink> "
 	"sink_input_properties=<properties for the sink_input> "
-	"resampler_profile=<empty>|disable|high|medium|low "
+	"resampler_profile=<empty>|high|medium|low "
 	"fec_code=<empty>|disable|rs8m|ldpc "
 	"sess_latency_msec=<target network latency in milliseconds> "
 	"local_ip=<local receiver ip> "
diff --git a/src/modules/module-protocol-pulse/modules/module-roc-source.c b/src/modules/module-protocol-pulse/modules/module-roc-source.c
index 9048253505..880a954561 100644
--- a/src/modules/module-protocol-pulse/modules/module-roc-source.c
+++ b/src/modules/module-protocol-pulse/modules/module-roc-source.c
@@ -27,7 +27,7 @@
 static const char *const pulse_module_options =
 	"source_name=<name for the source> "
 	"source_properties=<properties for the source> "
-	"resampler_profile=<empty>|disable|high|medium|low "
+	"resampler_profile=<empty>|high|medium|low "
 	"fec_code=<empty>|disable|rs8m|ldpc "
 	"sess_latency_msec=<target network latency in milliseconds> "
 	"local_ip=<local receiver ip> "
diff --git a/src/modules/module-roc-sink.c b/src/modules/module-roc-sink.c
index 63992db43a..5d58ce9d37 100644
--- a/src/modules/module-roc-sink.c
+++ b/src/modules/module-roc-sink.c
@@ -259,11 +259,11 @@ static int roc_sink_setup(struct module_roc_sink_data *data)
 		return -EINVAL;
 	}
 
-	memset(&sender_config, 0, sizeof(sender_config));
+	spa_zero(sender_config);
 
-	sender_config.frame_sample_rate = data->rate;
-	sender_config.frame_channels = ROC_CHANNEL_SET_STEREO;
-	sender_config.frame_encoding = ROC_FRAME_ENCODING_PCM_FLOAT;
+	sender_config.frame_encoding.rate = data->rate;
+	sender_config.frame_encoding.channels = ROC_CHANNEL_LAYOUT_STEREO;
+	sender_config.frame_encoding.format = ROC_FORMAT_PCM_FLOAT32;
 	sender_config.fec_encoding = data->fec_code;
 
 	info.rate = data->rate;
diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index aa77979a27..4a7c3a2151 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -268,9 +268,10 @@ static int roc_source_setup(struct module_roc_source_data *data)
 	}
 
 	spa_zero(receiver_config);
-	receiver_config.frame_sample_rate = data->rate;
-	receiver_config.frame_channels = ROC_CHANNEL_SET_STEREO;
-	receiver_config.frame_encoding = ROC_FRAME_ENCODING_PCM_FLOAT;
+
+	receiver_config.frame_encoding.rate = data->rate;
+	receiver_config.frame_encoding.channels = ROC_CHANNEL_LAYOUT_STEREO;
+	receiver_config.frame_encoding.format = ROC_FORMAT_PCM_FLOAT32;
 	receiver_config.resampler_profile = data->resampler_profile;
 
 	info.rate = data->rate;
diff --git a/src/modules/module-roc/common.h b/src/modules/module-roc/common.h
index 248c66ebd8..f54c7e1d13 100644
--- a/src/modules/module-roc/common.h
+++ b/src/modules/module-roc/common.h
@@ -31,8 +31,6 @@ static inline int pw_roc_parse_resampler_profile(roc_resampler_profile *out, con
 {
 	if (!str || !*str)
 		*out = ROC_RESAMPLER_PROFILE_DEFAULT;
-	else if (spa_streq(str, "disable"))
-		*out = ROC_RESAMPLER_PROFILE_DISABLE;
 	else if (spa_streq(str, "high"))
 		*out = ROC_RESAMPLER_PROFILE_HIGH;
 	else if (spa_streq(str, "medium"))
-- 
GitLab


From 6d8a31a3e4907e84f000874eddd5ca65e7986829 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Wed, 22 Nov 2023 19:33:14 +0100
Subject: [PATCH 2/7] pipewire: module-roc-{sink,source}: deduplicate protocol
 selection

---
 src/modules/module-roc-sink.c   | 16 +---------------
 src/modules/module-roc-source.c | 16 +---------------
 src/modules/module-roc/common.h | 19 +++++++++++++++++++
 3 files changed, 21 insertions(+), 30 deletions(-)

diff --git a/src/modules/module-roc-sink.c b/src/modules/module-roc-sink.c
index 5d58ce9d37..ec7a0740b7 100644
--- a/src/modules/module-roc-sink.c
+++ b/src/modules/module-roc-sink.c
@@ -282,21 +282,7 @@ static int roc_sink_setup(struct module_roc_sink_data *data)
 		return -EINVAL;
 	}
 
-	switch (data->fec_code) {
-	case ROC_FEC_ENCODING_DEFAULT:
-	case ROC_FEC_ENCODING_RS8M:
-		audio_proto = ROC_PROTO_RTP_RS8M_SOURCE;
-		repair_proto = ROC_PROTO_RS8M_REPAIR;
-		break;
-	case ROC_FEC_ENCODING_LDPC_STAIRCASE:
-		audio_proto = ROC_PROTO_RTP_LDPC_SOURCE;
-		repair_proto = ROC_PROTO_LDPC_REPAIR;
-		break;
-	default:
-		audio_proto = ROC_PROTO_RTP;
-		repair_proto = 0;
-		break;
-	}
+	pw_roc_fec_encoding_to_proto(data->fec_code, &audio_proto, &repair_proto);
 
 	res = pw_roc_create_endpoint(&data->remote_source_addr, audio_proto, data->remote_ip, data->remote_source_port);
 	if (res < 0) {
diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index 4a7c3a2151..8f6de4d809 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -304,21 +304,7 @@ static int roc_source_setup(struct module_roc_source_data *data)
 		return -EINVAL;
 	}
 
-	switch (data->fec_code) {
-	case ROC_FEC_ENCODING_DEFAULT:
-	case ROC_FEC_ENCODING_RS8M:
-		audio_proto = ROC_PROTO_RTP_RS8M_SOURCE;
-		repair_proto = ROC_PROTO_RS8M_REPAIR;
-		break;
-	case ROC_FEC_ENCODING_LDPC_STAIRCASE:
-		audio_proto = ROC_PROTO_RTP_LDPC_SOURCE;
-		repair_proto = ROC_PROTO_LDPC_REPAIR;
-		break;
-	default:
-		audio_proto = ROC_PROTO_RTP;
-		repair_proto = 0;
-		break;
-	}
+	pw_roc_fec_encoding_to_proto(data->fec_code, &audio_proto, &repair_proto);
 
 	res = pw_roc_create_endpoint(&data->local_source_addr, audio_proto, data->local_ip, data->local_source_port);
 	if (res < 0) {
diff --git a/src/modules/module-roc/common.h b/src/modules/module-roc/common.h
index f54c7e1d13..478858dcff 100644
--- a/src/modules/module-roc/common.h
+++ b/src/modules/module-roc/common.h
@@ -66,4 +66,23 @@ out_error_free_ep:
 	return -EINVAL;
 }
 
+static inline void pw_roc_fec_encoding_to_proto(roc_fec_encoding fec_code, roc_protocol *audio, roc_protocol *repair)
+{
+	switch (fec_code) {
+	case ROC_FEC_ENCODING_DEFAULT:
+	case ROC_FEC_ENCODING_RS8M:
+		*audio = ROC_PROTO_RTP_RS8M_SOURCE;
+		*repair = ROC_PROTO_RS8M_REPAIR;
+		break;
+	case ROC_FEC_ENCODING_LDPC_STAIRCASE:
+		*audio = ROC_PROTO_RTP_LDPC_SOURCE;
+		*repair = ROC_PROTO_LDPC_REPAIR;
+		break;
+	default:
+		*audio = ROC_PROTO_RTP;
+		*repair = 0;
+		break;
+	}
+}
+
 #endif /* MODULE_ROC_COMMON_H */
-- 
GitLab


From 0a3bd825cd195aae6b331ce9066ebe0642c43db3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Wed, 22 Nov 2023 19:42:13 +0100
Subject: [PATCH 3/7] pipewire: module-roc-{sink,source}: remove `props` member

The `props` member was not used at all, so get rid of it.
---
 src/modules/module-roc-sink.c   | 8 +++-----
 src/modules/module-roc-source.c | 8 +++-----
 2 files changed, 6 insertions(+), 10 deletions(-)

diff --git a/src/modules/module-roc-sink.c b/src/modules/module-roc-sink.c
index ec7a0740b7..6dc4f7cb6c 100644
--- a/src/modules/module-roc-sink.c
+++ b/src/modules/module-roc-sink.c
@@ -19,6 +19,7 @@
 #include <roc/log.h>
 #include <roc/sender.h>
 
+#include <pipewire/cleanup.h>
 #include <pipewire/pipewire.h>
 #include <pipewire/impl.h>
 
@@ -81,7 +82,6 @@ PW_LOG_TOPIC_STATIC(mod_topic, "mod." NAME);
 struct module_roc_sink_data {
 	struct pw_impl_module *module;
 	struct spa_hook module_listener;
-	struct pw_properties *props;
 	struct pw_context *module_context;
 
 	struct pw_core *core;
@@ -211,7 +211,6 @@ static void impl_destroy(struct module_roc_sink_data *data)
 		pw_core_disconnect(data->core);
 
 	pw_properties_free(data->capture_props);
-	pw_properties_free(data->props);
 
 	if (data->sender)
 		roc_sender_close(data->sender);
@@ -353,7 +352,7 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 {
 	struct pw_context *context = pw_impl_module_get_context(module);
 	struct module_roc_sink_data *data;
-	struct pw_properties *props = NULL, *capture_props = NULL;
+	struct pw_properties *capture_props = NULL;
 	const char *str;
 	int res = 0;
 
@@ -366,13 +365,12 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 	if (args == NULL)
 		args = "";
 
-	props = pw_properties_new_string(args);
+	spa_autoptr(pw_properties) props = pw_properties_new_string(args);
 	if (props == NULL) {
 		res = -errno;
 		pw_log_error( "can't create properties: %m");
 		goto out;
 	}
-	data->props = props;
 
 	capture_props = pw_properties_new(NULL, NULL);
 	if (capture_props == NULL) {
diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index 8f6de4d809..f1ff70c8ae 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -19,6 +19,7 @@
 #include <roc/log.h>
 #include <roc/receiver.h>
 
+#include <pipewire/cleanup.h>
 #include <pipewire/pipewire.h>
 #include <pipewire/impl.h>
 
@@ -86,7 +87,6 @@ PW_LOG_TOPIC_STATIC(mod_topic, "mod." NAME);
 struct module_roc_source_data {
 	struct pw_impl_module *module;
 	struct spa_hook module_listener;
-	struct pw_properties *props;
 	struct pw_context *module_context;
 
 	struct pw_core *core;
@@ -220,7 +220,6 @@ static void impl_destroy(struct module_roc_source_data *data)
 		pw_core_disconnect(data->core);
 
 	pw_properties_free(data->playback_props);
-	pw_properties_free(data->props);
 
 	if (data->receiver)
 		roc_receiver_close(data->receiver);
@@ -378,7 +377,7 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 {
 	struct pw_context *context = pw_impl_module_get_context(module);
 	struct module_roc_source_data *data;
-	struct pw_properties *props = NULL, *playback_props = NULL;
+	struct pw_properties *playback_props = NULL;
 	const char *str;
 	int res = 0;
 
@@ -391,13 +390,12 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 	if (args == NULL)
 		args = "";
 
-	props = pw_properties_new_string(args);
+	spa_autoptr(pw_properties) props = pw_properties_new_string(args);
 	if (props == NULL) {
 		res = -errno;
 		pw_log_error( "can't create properties: %m");
 		goto out;
 	}
-	data->props = props;
 
 	playback_props = pw_properties_new(NULL, NULL);
 	if (playback_props == NULL) {
-- 
GitLab


From 68c0a136941cac2edcfc2cdc74b37ebd3b55ffbe Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Wed, 22 Nov 2023 19:44:26 +0100
Subject: [PATCH 4/7] pipewire: module-roc-{sink,source}: pass 0 to
 `pw_properties_get_uint32()`

There is no reason to use `data->rate` as the default value
since it will be zero, so just pass 0 explicitly.
---
 src/modules/module-roc-sink.c   | 2 +-
 src/modules/module-roc-source.c | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/modules/module-roc-sink.c b/src/modules/module-roc-sink.c
index 6dc4f7cb6c..596516ed70 100644
--- a/src/modules/module-roc-sink.c
+++ b/src/modules/module-roc-sink.c
@@ -402,7 +402,7 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 	if ((str = pw_properties_get(capture_props, PW_KEY_MEDIA_CLASS)) == NULL)
 		pw_properties_set(capture_props, PW_KEY_MEDIA_CLASS, "Audio/Sink");
 
-	data->rate = pw_properties_get_uint32(capture_props, PW_KEY_AUDIO_RATE, data->rate);
+	data->rate = pw_properties_get_uint32(capture_props, PW_KEY_AUDIO_RATE, 0);
 	if (data->rate == 0)
 		data->rate = PW_ROC_DEFAULT_RATE;
 
diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index f1ff70c8ae..f64288f8a5 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -425,7 +425,7 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 	if (pw_properties_get(playback_props, PW_KEY_NODE_NETWORK) == NULL)
 		pw_properties_set(playback_props, PW_KEY_NODE_NETWORK, "true");
 
-	data->rate = pw_properties_get_uint32(playback_props, PW_KEY_AUDIO_RATE, data->rate);
+	data->rate = pw_properties_get_uint32(playback_props, PW_KEY_AUDIO_RATE, 0);
 	if (data->rate == 0)
 		data->rate = PW_ROC_DEFAULT_RATE;
 
-- 
GitLab


From b5e898ee83137ef4e99e3a8d9d9d8d4f87bda3a0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Wed, 22 Nov 2023 19:49:32 +0100
Subject: [PATCH 5/7] pipewire: module-roc-{sink,source}: do not remove from
 argument property list

The property list is destroyed and not kept around, not passed
to any other component, so this is unnecessary work.
---
 src/modules/module-roc-sink.c   | 5 -----
 src/modules/module-roc-source.c | 7 -------
 2 files changed, 12 deletions(-)

diff --git a/src/modules/module-roc-sink.c b/src/modules/module-roc-sink.c
index 596516ed70..80e463b905 100644
--- a/src/modules/module-roc-sink.c
+++ b/src/modules/module-roc-sink.c
@@ -385,7 +385,6 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 
 	if ((str = pw_properties_get(props, "sink.name")) != NULL) {
 		pw_properties_set(capture_props, PW_KEY_NODE_NAME, str);
-		pw_properties_set(props, "sink.name", NULL);
 	}
 
 	if ((str = pw_properties_get(props, "sink.props")) != NULL)
@@ -408,7 +407,6 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 
 	if ((str = pw_properties_get(props, "remote.ip")) != NULL) {
 		data->remote_ip = strdup(str);
-		pw_properties_set(props, "remote.ip", NULL);
 	} else {
 		pw_log_error("Remote IP not specified");
 		res = -EINVAL;
@@ -417,14 +415,12 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 
 	if ((str = pw_properties_get(props, "remote.source.port")) != NULL) {
 		data->remote_source_port = pw_properties_parse_int(str);
-		pw_properties_set(props, "remote.source.port", NULL);
 	} else {
 		data->remote_source_port = PW_ROC_DEFAULT_SOURCE_PORT;
 	}
 
 	if ((str = pw_properties_get(props, "remote.repair.port")) != NULL) {
 		data->remote_repair_port = pw_properties_parse_int(str);
-		pw_properties_set(props, "remote.repair.port", NULL);
 	} else {
 		data->remote_repair_port = PW_ROC_DEFAULT_REPAIR_PORT;
 	}
@@ -434,7 +430,6 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 			data->fec_code = ROC_FEC_ENCODING_DEFAULT;
 		}
 		pw_log_info("using fec.code %s %d", str, data->fec_code);
-		pw_properties_set(props, "fec.code", NULL);
 	} else {
 		data->fec_code = ROC_FEC_ENCODING_DEFAULT;
 	}
diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index f64288f8a5..3a387fb514 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -410,7 +410,6 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 
 	if ((str = pw_properties_get(props, "source.name")) != NULL) {
 		pw_properties_set(playback_props, PW_KEY_NODE_NAME, str);
-		pw_properties_set(props, "source.name", NULL);
 	}
 
 	if ((str = pw_properties_get(props, "source.props")) != NULL)
@@ -431,28 +430,24 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 
 	if ((str = pw_properties_get(props, "local.ip")) != NULL) {
 		data->local_ip = strdup(str);
-		pw_properties_set(props, "local.ip", NULL);
 	} else {
 		data->local_ip = strdup(PW_ROC_DEFAULT_IP);
 	}
 
 	if ((str = pw_properties_get(props, "local.source.port")) != NULL) {
 		data->local_source_port = pw_properties_parse_int(str);
-		pw_properties_set(props, "local.source.port", NULL);
 	} else {
 		data->local_source_port = PW_ROC_DEFAULT_SOURCE_PORT;
 	}
 
 	if ((str = pw_properties_get(props, "local.repair.port")) != NULL) {
 		data->local_repair_port = pw_properties_parse_int(str);
-		pw_properties_set(props, "local.repair.port", NULL);
 	} else {
 		data->local_repair_port = PW_ROC_DEFAULT_REPAIR_PORT;
 	}
 
 	if ((str = pw_properties_get(props, "sess.latency.msec")) != NULL) {
 		data->sess_latency_msec = pw_properties_parse_int(str);
-		pw_properties_set(props, "sess.latency.msec", NULL);
 	} else {
 		data->sess_latency_msec = PW_ROC_DEFAULT_SESS_LATENCY;
 	}
@@ -462,7 +457,6 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 			pw_log_warn("Invalid resampler profile %s, using default", str);
 			data->resampler_profile = ROC_RESAMPLER_PROFILE_DEFAULT;
 		}
-		pw_properties_set(props, "resampler.profile", NULL);
 	} else {
 		data->resampler_profile = ROC_RESAMPLER_PROFILE_DEFAULT;
 	}
@@ -471,7 +465,6 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 			pw_log_error("Invalid fec code %s, using default", str);
 			data->fec_code = ROC_FEC_ENCODING_DEFAULT;
 		}
-		pw_properties_set(props, "fec.code", NULL);
 	} else {
 		data->fec_code = ROC_FEC_ENCODING_DEFAULT;
 	}
-- 
GitLab


From b19d0ffbc3f90d85edca7836be5b82548787c3e4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Wed, 22 Nov 2023 22:28:12 +0100
Subject: [PATCH 6/7] pipewire: module-roc-source: use `SPA_NSEC_PER_MSEC`
 instead of hard-coding

---
 src/modules/module-roc-source.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index 3a387fb514..96a6bf4214 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -295,7 +295,7 @@ static int roc_source_setup(struct module_roc_source_data *data)
 	 * See API reference:
 	 * https://roc-streaming.org/toolkit/docs/api/reference.html
 	 */
-	receiver_config.target_latency = (unsigned long long)data->sess_latency_msec * 1000000ULL;
+	receiver_config.target_latency = (unsigned long long)data->sess_latency_msec * SPA_NSEC_PER_MSEC;
 
 	res = roc_receiver_open(data->context, &receiver_config, &data->receiver);
 	if (res) {
-- 
GitLab


From d88def09bdce172b7c6de3086e5a11a34b0aad87 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Barnab=C3=A1s=20P=C5=91cze?= <pobrn@protonmail.com>
Date: Thu, 23 Nov 2023 16:44:17 +0100
Subject: [PATCH 7/7] pipewire: module-roc-{sink,source}: add rudimentary
 ROC_INTERFACE_AUDIO_CONTROL support

---
 .../modules/module-roc-sink-input.c           |  9 ++++-
 .../modules/module-roc-sink.c                 | 11 +++++-
 .../modules/module-roc-source.c               | 10 ++++-
 src/modules/module-roc-sink.c                 | 38 +++++++++++++++----
 src/modules/module-roc-source.c               | 37 ++++++++++++++----
 src/modules/module-roc/common.h               |  2 +
 6 files changed, 88 insertions(+), 19 deletions(-)

diff --git a/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c b/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c
index 4cfc3e3a9a..2200a7bfcc 100644
--- a/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c
+++ b/src/modules/module-protocol-pulse/modules/module-roc-sink-input.c
@@ -32,7 +32,9 @@ static const char *const pulse_module_options =
 	"sess_latency_msec=<target network latency in milliseconds> "
 	"local_ip=<local receiver ip> "
 	"local_source_port=<local receiver port for source packets> "
-	"local_repair_port=<local receiver port for repair packets> ";
+	"local_repair_port=<local receiver port for repair packets> "
+	"local_control_port=<local receiver port for control packets> "
+	;
 
 #define NAME "roc-sink-input"
 
@@ -162,6 +164,11 @@ static int module_roc_sink_input_prepare(struct module * const module)
 		pw_properties_set(props, "local_repair_port", NULL);
 	}
 
+	if ((str = pw_properties_get(props, "local_control_port")) != NULL) {
+		pw_properties_set(roc_props, "local.control.port", str);
+		pw_properties_set(props, "local_control_port", NULL);
+	}
+
 	if ((str = pw_properties_get(props, "sess_latency_msec")) != NULL) {
 		pw_properties_set(roc_props, "sess.latency.msec", str);
 		pw_properties_set(props, "sess_latency_msec", NULL);
diff --git a/src/modules/module-protocol-pulse/modules/module-roc-sink.c b/src/modules/module-protocol-pulse/modules/module-roc-sink.c
index 808fa4e3e8..6b03006ab4 100644
--- a/src/modules/module-protocol-pulse/modules/module-roc-sink.c
+++ b/src/modules/module-protocol-pulse/modules/module-roc-sink.c
@@ -30,7 +30,9 @@ static const char *const pulse_module_options =
 	"fec_code=<empty>|disable|rs8m|ldpc "
 	"remote_ip=<remote receiver ip> "
 	"remote_source_port=<remote receiver port for source packets> "
-	"remote_repair_port=<remote receiver port for repair packets> ";
+	"remote_repair_port=<remote receiver port for repair packets> "
+	"remote_control_port=<remote receiver port for control packets> "
+	;
 
 #define NAME "roc-sink"
 
@@ -119,6 +121,7 @@ static const char* const valid_args[] = {
 	"remote_ip",
 	"remote_source_port",
 	"remote_repair_port",
+	"remote_control_port",
 	NULL
 };
 static const struct spa_dict_item module_roc_sink_info[] = {
@@ -177,6 +180,12 @@ static int module_roc_sink_prepare(struct module * const module)
 		pw_properties_set(roc_props, "remote.repair.port", str);
 		pw_properties_set(props, "remote_repair_port", NULL);
 	}
+
+	if ((str = pw_properties_get(props, "remote_control_port")) != NULL) {
+		pw_properties_set(roc_props, "remote.control.port", str);
+		pw_properties_set(props, "remote_control_port", NULL);
+	}
+
 	if ((str = pw_properties_get(props, "fec_code")) != NULL) {
 		pw_properties_set(roc_props, "fec.code", str);
 		pw_properties_set(props, "fec_code", NULL);
diff --git a/src/modules/module-protocol-pulse/modules/module-roc-source.c b/src/modules/module-protocol-pulse/modules/module-roc-source.c
index 880a954561..661153d1e0 100644
--- a/src/modules/module-protocol-pulse/modules/module-roc-source.c
+++ b/src/modules/module-protocol-pulse/modules/module-roc-source.c
@@ -32,7 +32,9 @@ static const char *const pulse_module_options =
 	"sess_latency_msec=<target network latency in milliseconds> "
 	"local_ip=<local receiver ip> "
 	"local_source_port=<local receiver port for source packets> "
-	"local_repair_port=<local receiver port for repair packets> ";
+	"local_repair_port=<local receiver port for repair packets> "
+	"local_control_port=<local receiver port for control packets> "
+	;
 
 #define NAME "roc-source"
 
@@ -123,6 +125,7 @@ static const char* const valid_args[] = {
 	"local_ip",
 	"local_source_port",
 	"local_repair_port",
+	"local_control_port",
 	NULL
 };
 
@@ -179,6 +182,11 @@ static int module_roc_source_prepare(struct module * const module)
 		pw_properties_set(props, "local_repair_port", NULL);
 	}
 
+	if ((str = pw_properties_get(props, "local_control_port")) != NULL) {
+		pw_properties_set(roc_props, "local.control.port", str);
+		pw_properties_set(props, "local_control_port", NULL);
+	}
+
 	if ((str = pw_properties_get(props, "sess_latency_msec")) != NULL) {
 		pw_properties_set(roc_props, "sess.latency.msec", str);
 		pw_properties_set(props, "sess_latency_msec", NULL);
diff --git a/src/modules/module-roc-sink.c b/src/modules/module-roc-sink.c
index 80e463b905..a93dbc7824 100644
--- a/src/modules/module-roc-sink.c
+++ b/src/modules/module-roc-sink.c
@@ -44,6 +44,7 @@
  * - `remote.ip = <str>`: remote receiver ip
  * - `remote.source.port = <str>`: remote receiver TCP/UDP port for source packets
  * - `remote.repair.port = <str>`: remote receiver TCP/UDP port for receiver packets
+ * - `remote.control.port = <str>`: remote receiver TCP/UDP port for control packets
  * - `fec.code = <str>`: Possible values: `disable`, `rs8m`, `ldpc`
  *
  * ## General options
@@ -63,6 +64,7 @@
  *          remote.ip = 192.168.0.244
  *          remote.source.port = 10001
  *          remote.repair.port = 10002
+ *          remote.control.port = 10003
  *          sink.name = "ROC Sink"
  *          sink.props = {
  *             node.name = "roc-sink"
@@ -104,6 +106,9 @@ struct module_roc_sink_data {
 	char *remote_ip;
 	int remote_source_port;
 	int remote_repair_port;
+
+	roc_endpoint *remote_control_addr;
+	int remote_control_port;
 };
 
 static void stream_destroy(void *d)
@@ -212,15 +217,12 @@ static void impl_destroy(struct module_roc_sink_data *data)
 
 	pw_properties_free(data->capture_props);
 
-	if (data->sender)
-		roc_sender_close(data->sender);
-	if (data->context)
-		roc_context_close(data->context);
+	spa_clear_ptr(data->sender, roc_sender_close);
+	spa_clear_ptr(data->context, roc_context_close);
 
-	if (data->remote_source_addr)
-		(void) roc_endpoint_deallocate(data->remote_source_addr);
-	if (data->remote_repair_addr)
-		(void) roc_endpoint_deallocate(data->remote_repair_addr);
+	spa_clear_ptr(data->remote_source_addr, roc_endpoint_deallocate);
+	spa_clear_ptr(data->remote_repair_addr, roc_endpoint_deallocate);
+	spa_clear_ptr(data->remote_control_addr, roc_endpoint_deallocate);
 
 	free(data->remote_ip);
 	free(data);
@@ -309,6 +311,18 @@ static int roc_sink_setup(struct module_roc_sink_data *data)
 		}
 	}
 
+	res = pw_roc_create_endpoint(&data->remote_control_addr, PW_ROC_DEFAULT_CONTROL_PROTO, data->remote_ip, data->remote_control_port);
+	if (res < 0) {
+		pw_log_error("failed to create control endpoint: %s", spa_strerror(res));
+		return res;
+	}
+
+	if (roc_sender_connect(data->sender, ROC_SLOT_DEFAULT, ROC_INTERFACE_AUDIO_CONTROL,
+				data->remote_control_addr) != 0) {
+		pw_log_error("can't connect roc sender to remote control address");
+		return -EINVAL;
+	}
+
 	data->capture = pw_stream_new(data->core,
 			"roc-sink capture", data->capture_props);
 	data->capture_props = NULL;
@@ -343,6 +357,7 @@ static const struct spa_dict_item module_roc_sink_info[] = {
 				"remote.ip=<remote receiver ip> "
 				"( remote.source.port=<remote receiver port for source packets> ) "
 				"( remote.repair.port=<remote receiver port for repair packets> ) "
+				"( remote.control.port=<remote receiver port for control packets> ) "
 				"( sink.props= { key=val ... } ) " },
 	{ PW_KEY_MODULE_VERSION, PACKAGE_VERSION },
 };
@@ -424,6 +439,13 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 	} else {
 		data->remote_repair_port = PW_ROC_DEFAULT_REPAIR_PORT;
 	}
+
+	if ((str = pw_properties_get(props, "remote.control.port")) != NULL) {
+		data->remote_control_port = pw_properties_parse_int(str);
+	} else {
+		data->remote_control_port = PW_ROC_DEFAULT_CONTROL_PORT;
+	}
+
 	if ((str = pw_properties_get(props, "fec.code")) != NULL) {
 		if (pw_roc_parse_fec_encoding(&data->fec_code, str)) {
 			pw_log_error("Invalid fec code %s, using default", str);
diff --git a/src/modules/module-roc-source.c b/src/modules/module-roc-source.c
index 96a6bf4214..aca3cd3e8f 100644
--- a/src/modules/module-roc-source.c
+++ b/src/modules/module-roc-source.c
@@ -44,6 +44,7 @@
  * - `local.ip = <str>`: local sender ip
  * - `local.source.port = <str>`: local receiver TCP/UDP port for source packets
  * - `local.repair.port = <str>`: local receiver TCP/UDP port for receiver packets
+ * - `local.control.port = <str>`: local receiver TCP/UDP port for control packets
  * - `sess.latency.msec = <str>`: target network latency in milliseconds
  * - `resampler.profile = <str>`: Possible values: `disable`, `high`,
  *   `medium`, `low`.
@@ -68,6 +69,7 @@
  *          sess.latency.msec = 5000
  *          local.source.port = 10001
  *          local.repair.port = 10002
+ *          local.control.port = 10003
  *          source.name = "ROC Source"
  *          source.props = {
  *             node.name = "roc-source"
@@ -112,6 +114,9 @@ struct module_roc_source_data {
 	int local_source_port;
 	int local_repair_port;
 	int sess_latency_msec;
+
+	roc_endpoint *local_control_addr;
+	int local_control_port;
 };
 
 static void stream_destroy(void *d)
@@ -221,15 +226,12 @@ static void impl_destroy(struct module_roc_source_data *data)
 
 	pw_properties_free(data->playback_props);
 
-	if (data->receiver)
-		roc_receiver_close(data->receiver);
-	if (data->context)
-		roc_context_close(data->context);
+	spa_clear_ptr(data->receiver, roc_receiver_close);
+	spa_clear_ptr(data->context, roc_context_close);
 
-	if (data->local_source_addr)
-		(void) roc_endpoint_deallocate(data->local_source_addr);
-	if (data->local_repair_addr)
-		(void) roc_endpoint_deallocate(data->local_repair_addr);
+	spa_clear_ptr(data->local_source_addr, roc_endpoint_deallocate);
+	spa_clear_ptr(data->local_repair_addr, roc_endpoint_deallocate);
+	spa_clear_ptr(data->local_control_addr, roc_endpoint_deallocate);
 
 	free(data->local_ip);
 	free(data);
@@ -331,6 +333,18 @@ static int roc_source_setup(struct module_roc_source_data *data)
 		}
 	}
 
+	res = pw_roc_create_endpoint(&data->local_control_addr, PW_ROC_DEFAULT_CONTROL_PROTO, data->local_ip, data->local_control_port);
+	if (res < 0) {
+		pw_log_error("failed to create control endpoint: %s", spa_strerror(res));
+		return res;
+	}
+
+	if (roc_receiver_bind(data->receiver, ROC_SLOT_DEFAULT, ROC_INTERFACE_AUDIO_CONTROL,
+				data->local_control_addr) != 0) {
+		pw_log_error("can't connect roc receiver to local control address");
+		return -EINVAL;
+	}
+
 	data->playback = pw_stream_new(data->core,
 			"roc-source playback", data->playback_props);
 	data->playback_props = NULL;
@@ -368,6 +382,7 @@ static const struct spa_dict_item module_roc_source_info[] = {
 				"( local.ip=<local receiver ip> ) "
 				"( local.source.port=<local receiver port for source packets> ) "
 				"( local.repair.port=<local receiver port for repair packets> ) "
+				"( local.control.port=<local receiver port for control packets> ) "
 				"( source.props= { key=value ... } ) " },
 	{ PW_KEY_MODULE_VERSION, PACKAGE_VERSION },
 };
@@ -446,6 +461,12 @@ int pipewire__module_init(struct pw_impl_module *module, const char *args)
 		data->local_repair_port = PW_ROC_DEFAULT_REPAIR_PORT;
 	}
 
+	if ((str = pw_properties_get(props, "local.control.port")) != NULL) {
+		data->local_control_port = pw_properties_parse_int(str);
+	} else {
+		data->local_control_port = PW_ROC_DEFAULT_CONTROL_PORT;
+	}
+
 	if ((str = pw_properties_get(props, "sess.latency.msec")) != NULL) {
 		data->sess_latency_msec = pw_properties_parse_int(str);
 	} else {
diff --git a/src/modules/module-roc/common.h b/src/modules/module-roc/common.h
index 478858dcff..2164a34283 100644
--- a/src/modules/module-roc/common.h
+++ b/src/modules/module-roc/common.h
@@ -9,8 +9,10 @@
 #define PW_ROC_DEFAULT_IP "0.0.0.0"
 #define PW_ROC_DEFAULT_SOURCE_PORT 10001
 #define PW_ROC_DEFAULT_REPAIR_PORT 10002
+#define PW_ROC_DEFAULT_CONTROL_PORT 10003
 #define PW_ROC_DEFAULT_SESS_LATENCY 200
 #define PW_ROC_DEFAULT_RATE 44100
+#define PW_ROC_DEFAULT_CONTROL_PROTO ROC_PROTO_RTCP
 
 static inline int pw_roc_parse_fec_encoding(roc_fec_encoding *out, const char *str)
 {
-- 
GitLab
